# 1.
name: Test & Build

# 2.
on:
  pull_request:
    branches:
      - main
#      - dev
  push:
    branches:
      - main
#      - dev

# 3.
jobs:
  main:
    runs-on: macos-latest

    # 4.
    steps:

      # 5.
      - name: Clone repository
        uses: actions/checkout@v4

      # 6.
      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "18.x"

      # 7.
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.29.2'

      # 8.
      - name: Get Flutter packages
        run: |
          flutter pub get

      # 9.
      - name: Check for lints
        run: |
          flutter analyze

      # 10.
      - name: Run all tests
        run: |
          flutter test

      # 11.
      - name: Build APK
        run: |
          flutter build apk

      #      # 12.
      #      - name: Flutter build ipa
      #        run: |
      #          flutter build ipa --no-codesign
      #
      #      # 13.
      #      - name: Compress Archives and IPAs
      #        run: |
      #          cd build
      #          tar -czf ios_build.tar.gz ios

      # 14.
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            build/app/outputs/flutter-apk/app-release.apk
      #            build/ios_build.tar.gz

      # 15. Create service account file first
      - name: Create service account file
        run: echo '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}' > ${{ runner.temp }}/service-account.json

      # 16. Setup Firebase CLI
      - name: Setup Firebase CLI
        run: npm install -g firebase-tools

      # 17. Upload APK to Firebase App Distribution using CI token
      - name: Upload APK to Firebase App Distribution
        run: |
          firebase appdistribution:distribute build/app/outputs/flutter-apk/app-release.apk \
            --app "${{ secrets.FIREBASE_APP_ID }}" \
            --token "${{ secrets.FIREBASE_TOKEN }}" \
            --release-notes "Changes in this build:
            - Automated build from GitHub Actions
            - Branch: ${{ github.ref_name }}
            - Commit: ${{ github.sha }}"
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ runner.temp }}/service-account.json
      # Add this step after your Firebase distribution step
      # 18. Send APK to Telegram

      - name: Send APK to Telegram
        run: |
          curl -F document=@"build/app/outputs/flutter-apk/app-release.apk" \
               -F caption="âœ… New build completed! Branch: ${{ github.ref_name }}, Commit: ${{ github.sha }}" \
               https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendDocument?chat_id=${{ secrets.TELEGRAM_TO }}
        env:
          TELEGRAM_TOKEN: 7610690412:AAH-10MNxScho20cpJy2mYqCEYWhli8jskM
          TELEGRAM_TO: -4622151301